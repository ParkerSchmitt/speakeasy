NODE_ENV = dev


# CUSTOM
ACCOUNT_TABLE_NAME = accounts
TOPIC_TABLE_NAME = topics
CARD_ACCOUNT_LINKAGE_NAME = cards_accounts
CARD_TABLE_NAME = cards
MAX_CARDS = 10


# CORS
CORS_ORIGIN = http://localhost:3000

CORS_CREDENTIALS = true

CORS_OPTIONS_SUCCESS_STATUS = 200 # Some legacy browsers (IE11, various SmartTVs) choke on 204


# SESSION
SESSION_SECRET = TEMP               # This is the secret used to sign the session cookie. This can be either a string for a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters
                                    # Best practices may include:
                                    # The use of environment variables to store the secret, ensuring the secret itself does not exist in your repository.
                                    # Periodic updates of the secret, while ensuring the previous secret is in the array.
                                    # Using a secret that cannot be guessed will reduce the ability to hijack a session to only guessing the session ID (as determined by the genid option).
                                    # Changing the secret value will invalidate all existing sessions. In order to rotate the secret without invalidating sessions, provide an array of secrets, with the new secret as first element of the array, and including previous secrets as the later elements

SESSION_RESAVE = false              # Forces the session to be saved back to the session store, even if the session was never modified during the request. Depending on your store this may be necessary, but it can also create race conditions where a client makes two parallel requests to your server and changes made to the session in one request may get overwritten when the other request ends, even if it made no changes (this behavior also depends on what store you're using).

SESSION_COOKIE_MAX_AGE = 86400000   # 1000MS * 60S * 60M * 24HR = one day

SESSION_SAVE_UNINITALIZED = true    # Forces a session that is "uninitialized" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing false is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing false will also help with race conditions where a client makes multiple parallel requests without a session.
                                    
