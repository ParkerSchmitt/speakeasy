name: Publish to DO



# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select environment to publish to
env:
  IMAGE_NAME: ${{ vars.IMAGE_NAME }} 
  REGISTRY: ${{ vars.REGISTRY }} 
  INPUT_ENVKEY_API_PORT: ${{ vars.ENV_API_PORT }}
  INPUT_ENVKEY_ACCOUNT_TABLE_NAME: ${{ vars.ENV_ACCOUNT_TABLE_NAME }}
  INPUT_ENVKEY_TOPIC_TABLE_NAME: ${{ vars.ENV_TOPIC_TABLE_NAME }}
  INPUT_ENVKEY_CARD_ACCOUNT_LINKAGE_NAME: ${{ vars.ENV_CARD_ACCOUNT_LINKAGE_NAME }}
  INPUT_ENVKEY_CARD_TABLE_NAME: ${{ vars.ENV_CARD_TABLE_NAME }}
  INPUT_ENVKEY_CARD_REPORT_TABLE_NAME: ${{ vars.ENV_CARD_REPORT_TABLE_NAME }}
  INPUT_ENVKEY_SQL_CLIENT: ${{ vars.ENV_SQL_CLIENT }}
  INPUT_ENVKEY_SQL_HOST: ${{ vars.ENV_SQL_HOST }}
  INPUT_ENVKEY_SQL_PORT: ${{ vars.ENV_SQL_PORT }}
  INPUT_ENVKEY_REACT_APP_API_URL: ${{ vars.ENV_REACT_APP_API_URL }}
  INPUT_ENVKEY_SQL_USER: ${{ vars.ENV_SQL_USER }}
  INPUT_ENVKEY_SQL_PASSWORD: ${{ vars.ENV_SQL_PASSWORD }}
  INPUT_ENVKEY_SQL_DATABASE: ${{ vars.ENV_SQL_DATABASE }}
  INPUT_ENVKEY_SQL_FILENAME: ${{ vars.ENV_SQL_FILENAME }}
  INPUT_ENVKEY_MAX_CARDS: ${{ vars.ENV_MAX_CARDS }}
  INPUT_ENVKEY_CORS_ORIGIN: ${{ vars.ENV_CORS_ORIGIN }}
  INPUT_ENVKEY_CORS_CREDENTIALS: ${{ vars.ENV_CORS_ORIGIN }}
  INPUT_ENVKEY_CORS_OPTIONS_SUCCESS_STATUS: ${{ vars.ENV_CORS_OPTIONS_SUCCESS_STATUS }}
  INPUT_ENVKEY_SESSION_SECRET: ${{ vars.ENV_SESSION_SECRET }}                 
  INPUT_ENVKEY_SESSION_RESAVE: ${{ vars.ENV_SESSION_RESAVE }}
  INPUT_ENVKEY_SESSION_COOKIE_MAX_AGE: ${{vars.ENV_SESSION_COOKIE_MAX_AGE }}
  INPUT_ENVKEY_SESSION_SAVE_UNINITALIZED: ${{ vars.ENV_SESSION_SAVE_UNINITALIZED }}




jobs:
  build_and_push:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:  
      - name: Checkout the repo 
        uses: actions/checkout@v2
      - name: Create .env file
        uses: actually-colab/github-action-create-env-file@v2.3
        with:
          directory: './'
          file_name: '.env'  
      - name: Verify .env was created
        run: cat ./.env
      - name: Build container image
        run: docker compose build
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      
      - name: Remove all old frontend images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Remove all old backend images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Run garbage collection
        run: doctl registry garbage-collection start --include-untagged-manifests

      - name: Push frontend image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):frontend

      - name: Push backend image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):backend
        
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: build_and_push
    
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running containers
            docker compose down
            # Remove old container
            docker rm frontend
            docker rm backend
            # Delete old images
            docker rmi $(echo $REGISTRY)/$(echo $IMAGE_NAME):frontend
            docker rmi $(echo $REGISTRY)/$(echo $IMAGE_NAME):backend
            # Run composed containers from the new images
            docker compose up -d
            
